{"version":3,"sources":["logo-scroll.scss","../base/_global-vars.scss","../../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAEA,mBAEQ,UAAS,CACT,iBAAU,CACV,KAAK,CACL,MAAM,CACN,WAAQ,CACR,UAAO,CACP,6DCF+B,CDE/B,qDCF+B,CDG/B,UAAS,CATjB,iCAcQ,eAAe,CAUlB,6BAxBL,iCAiBY,iBAAW,CACX,gBAAa,CAAA,CEwDrB,4BF1EJ,iCAsBY,gBAAa,CAAA,CAKzB,MACI,qBAAe,CACf,sBAAgB,CAChB,iCAA+B,CAC/B,4FAA0B,CAC1B,iCAA+B,CAC/B,4FAA0B,CAC1B,8BAA4B,CAC5B,sFAAuB,CACvB,kEAA+B,CAC/B,+DAA4B,CAC/B,SAGG,iBAAU,CACV,aAAQ,CACR,0BAAO,CAEP,WAAQ,CACR,eAAU,CACV,QAAQ,CACR,UAAS,CAET,iBACI,oBAAiB,CACjB,QAAQ,CACR,UAAK,CAEL,WAAQ,CACR,mBAAS,CAAT,oBAAS,CAAT,mBAAS,CAAT,YAAS,CACT,gFAAiE,CAAjE,wEAAiE,CA+CpE,yBAtDD,iBAWQ,UAAK,CAGL,6EAA8D,CAA9D,qEAA8D,CAAA,CEHtE,0BFXA,iBAkBQ,UAAK,CAAA,CAlBZ,uBAuBO,mCAAsB,CAAtB,2BAAsB,CAvB7B,oBA4BO,UAAO,CACP,eAAY,CACZ,mBAAS,CAAT,oBAAS,CAAT,mBAAS,CAAT,YAAS,CACT,uBAAiB,CAAjB,8BAAiB,CAAjB,oBAAiB,CAAjB,sBAAiB,CACjB,wBAAa,CAAb,0BAAa,CAAb,qBAAa,CAAb,kBAAa,CACb,qBAAa,CAAb,mBAAa,CAAb,aAAa,CACb,kBAAa,CACb,QAAQ,CAkBX,0BArDJ,oBAsCW,QAAQ,CAAA,CAtCnB,wBA0CW,yBAAW,CAUd,yBApDR,wBA8Ce,yBAAW,CAAA,CEnC3B,0BFXC,wBAkDe,yBAAW,CAAA,CA5D/B,gCAoEY,mCAAsB,CAAtB,2BAAsB,CACzB,6BAeL,GACI,+BAAW,CAAX,uBAAW,CAEf,KACI,+FAAW,CAAX,uFAAW,CAAA,CAnBV,qBAeL,GACI,+BAAW,CAAX,uBAAW,CAEf,KACI,+FAAW,CAAX,uFAAW,CAAA","file":"../logo-scroll.min.css","sourcesContent":["@import '../common-imports';\n\n.logo-scroll {\n    &:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        box-shadow: $shadow7;\n        z-index: 10;\n    }\n\n    .h4,\n    h4 {\n        margin-bottom: 0;\n\n        @include media-breakpoint-down(xl) {\n            font-size: 2.56rem;\n            line-height: 1.09;\n        }\n\n        @include media-breakpoint-down(md) {\n            line-height: 1.25;\n        }\n    }\n}\n\n:root {\n    --marquee-width: 100vw;\n    --marquee-height: 10rem;\n    --marquee-elements-displayed-sm: 4;\n    --marquee-element-width-sm: calc(var(--marquee-width) / var(--marquee-elements-displayed-sm));\n    --marquee-elements-displayed-md: 6;\n    --marquee-element-width-md: calc(var(--marquee-width) / var(--marquee-elements-displayed-sm));\n    --marquee-elements-displayed: 8;\n    --marquee-element-width: calc(var(--marquee-width) / var(--marquee-elements-displayed));\n    --marquee-animation-duration-sm: calc(var(--marquee-elements) * 1s);\n    --marquee-animation-duration: calc(var(--marquee-elements) * 3s);\n}\n\n.marquee {\n    position: relative;\n    margin: 0 60px;\n    width: var(--marquee-width);\n    // height: var(--marquee-height);\n    height: auto;\n    overflow: hidden;\n    margin: 0;\n    z-index: 10;\n\n    &-content {\n        list-style-type: none;\n        margin: 0;\n        gap: 3.2rem;\n        // gap: calc(3.2rem * 3);\n        height: 100%;\n        display: flex;\n        animation: scrolling var(--marquee-animation-duration-sm) linear infinite;\n        // zoom: 0.35;\n\n        @include media-breakpoint-up(md) {\n            gap: 4.8rem;\n            // gap: calc(4.8rem * 2);\n            // zoom: 0.5;\n            animation: scrolling var(--marquee-animation-duration) linear infinite;\n        }\n\n        @include media-breakpoint-up(xl) {\n            gap: 6.4rem;\n            // gap: calc(6.4rem * 2);\n        }\n\n        &:hover {\n            animation-play-state: paused;\n        }\n\n        li {\n            // width: var(--marquee-element-width);\n            width: auto;\n            max-height: 100%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-shrink: 0;\n            white-space: nowrap;\n            margin: 0;\n\n            @include media-breakpoint-up(xl) {\n                margin: 0;\n            }\n\n            img {\n                max-width: 10rem !important;\n                // max-height: 60px;\n\n                @include media-breakpoint-up(md) {\n                    max-width: 11rem !important;\n                }\n\n                @include media-breakpoint-up(xl) {\n                    max-width: 13rem !important;\n                }\n            }\n        }\n    }\n\n    &:hover {\n        .marquee-content {\n            animation-play-state: paused;\n        }\n    }\n}\n\n// @keyframes scrolling {\n//     0% {\n//         transform: translateX(calc(-1 * var(--marquee-element-width) * var(--marquee-elements)));\n//     }\n//     100% {\n//         transform: translateX(0);\n//     }\n// }\n\n// Reverse\n@keyframes scrolling {\n    0% {\n        transform: translateX(0);\n    }\n    100% {\n        transform: translateX(calc(-1 * var(--marquee-element-width) * var(--marquee-elements)));\n    }\n}\n","$global: 'theme';\n$shadow: rgba(0, 0, 0, 0.161);\n$card-shadow:0.2rem 0.2rem 2.4rem 0 rgba(0, 0, 0, 0.24);\n$shadow2: inset 0.3rem 0.3rem 3rem 0.4rem rgba(0,0,0,0.24);\n$shadow3: inset 0.2rem 0.2rem 0.6rem 0 rgba(0, 0, 0, 0.5);\n$shadow4: inset 0.2rem 0.2rem 0.6rem 0 rgba(0, 0, 0, 0.24);\n$shadow5: 0 0.2rem 0.4rem  0 rgba(0, 0, 0, 0.5);\n$shadow6: 0.2rem 0.2rem 0.8rem 0 rgba(0, 0, 0, 0.5);\n$shadow7: inset 0.3rem 0.3rem 1.5rem 0 rgba(0, 0, 0, 0.25);\n$work-border: #161b5a;\n$placeholder-input: #878787;\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}